import{_ as n,o as h,c as l,k as s,a as i,R as a}from"./chunks/framework.S8W019Nk.js";const t="/assets/aop-proxy.uUqZRNS6.jpg",m=JSON.parse('{"title":"AOP面向切面编程","description":"","frontmatter":{},"headers":[],"relativePath":"backend/spring/aop.md","filePath":"backend/spring/aop.md"}'),k={name:"backend/spring/aop.md"},p=s("h1",{id:"aop面向切面编程",tabindex:"-1"},[i("AOP面向切面编程 "),s("a",{class:"header-anchor",href:"#aop面向切面编程","aria-label":'Permalink to "AOP面向切面编程"'},"​")],-1),e=s("h2",{id:"代理模式",tabindex:"-1"},[i("代理模式 "),s("a",{class:"header-anchor",href:"#代理模式","aria-label":'Permalink to "代理模式"'},"​")],-1),E=s("p",null,[s("span",{hl:""},"代理模式"),i("属于结构型模式。其作用是提供一个代理类，当调用目标方法的时候，不直接对目标方法进行调用，而是通过代理类间接调用。让不属于目标方法核心逻辑的代码从目标方法中剥离。减少对目标方法的调用和打扰，让附加功能能够集中在一起，便于统一维护。")],-1),r=a("",4),d=s("ul",null,[s("li",null,[i("JDK动态代理：被代理的类"),s("span",{hl:""},"必须实现接口"),i("，JDK动态代理会根据目标类接口生成一个代理对象，代理对象与目标对象有相同的接口")]),s("li",null,"cglib：通过继承被代理的类实现代理，不需被代理类实现接口")],-1),g=s("p",null,[s("span",{hlbg:""},"基于JDK动态代理技术，生成代理对象")],-1),y=a("",2),c=[p,e,E,r,d,g,y];function F(o,A,u,D,C,_){return h(),l("div",null,c)}const b=n(k,[["render",F]]);export{m as __pageData,b as default};
