import{_ as e,D as i,o,c as p,I as r,w as s,R as l,k as t,a as n}from"./chunks/framework.S8W019Nk.js";const c="/assets/ioc-component.FxJwc_sA.jpg",d="/assets/ioc-container.1x3aMbOz.jpg",J=JSON.parse('{"title":"容器和核心概念","description":"","frontmatter":{},"headers":[],"relativePath":"backend/spring/ioc-concept.md","filePath":"backend/spring/ioc-concept.md"}'),_={name:"backend/spring/ioc-concept.md"},h=l("",7),u=t("p",null,[n("组件可以完全交给Spring框架进行管理，Spring框架替代了程序员原有的"),t("span",{hl:""},"new对象和对象属性赋值动作"),n("等。")],-1),g=t("p",null,"Spring具体的管理组件动作包含：",-1),C=t("ul",null,[t("li",null,"组件对象实例化"),t("li",null,"组件对象属性赋值"),t("li",null,"组件对象之间引用"),t("li",null,"组件对象存活周期管理"),t("li",null,"......")],-1),S=t("p",null,[n("我们只需要编写"),t("span",{hl:""},"元数据（配置文件）"),n("告知Spring管理哪些类组件和它们的关系即可。Spring充当组件的容器，创建、管理、存储组件，减少我们的编码压力，让我们更加专注进行业务编写。")],-1),b=t("blockquote",null,[t("p",null,[n("组件是映射到应用程序中所有可重用组件的Java对象，应该是可复用的功能对象。"),t("span",{hl:""},"组件一定是对象，对象不一定是组件"),n("。")])],-1),m=t("p",null,[t("strong",null,"组件交给Spring管理的优点：")],-1),x=t("ul",null,[t("li",null,[n("降低了组件之间的"),t("span",{hl:""},"耦合性"),n("：Spring IOC容器通过依赖注入机制，将组件之间的依赖关系削弱，减少了程序组件之间的耦合性，使组件更加松散地耦合")]),t("li",null,[n("提高了代码的"),t("span",{hl:""},"可重用性和可维护性"),n("：将组件实例化的过程、依赖关系的管理等功能交给Spring IOC容器处理，使得组件代码更加模块化、可重用、更易于维护")]),t("li",null,[n("方便了"),t("span",{hl:""},"配置和管理"),n("：Spring IOC容器通过XML文件或注解，轻松的对组件进行配置和管理，使得组件的切换、替换等操作更加的方便和快捷")]),t("li",null,[n("交个Spring管理的对象（组件），"),t("span",{hl:""},"可享受Spring框架的其他功能（AOP、声明事务管理）等")])],-1),I=t("h2",{id:"容器和容器的实现",tabindex:"-1"},[n("容器和容器的实现 "),t("a",{class:"header-anchor",href:"#容器和容器的实现","aria-label":'Permalink to "容器和容器的实现"'},"​")],-1),A=t("p",null,[n("`Spring IOC容器负责实例化、配置和组装组件（bean）。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。"),t("span",{hl:""},"配置元数据以XML、Java注解或Java代码形式表现"),n("。它允许表达组成应用程序以及这些组件之间丰富的相互依赖关系。")],-1),f=l("",9),O=t("ul",null,[t("li",null,"XML配置方式：Spring框架最早的配置方式之一，通过在XML文件中定义Bean及其依赖关系、Bean的作用域等信息，让Spring IOC容器来管理Bean之间的依赖关系。"),t("li",null,[n("注解方式：从"),t("span",{hl:""},"Spring 2.5版本"),n("开始支持，通过在Bean类上使用注解来代替XML配置文件中的配置信息。通过在Bean类上加上相应的注解（如"),t("span",{hl:""},"@Component、@Service、@Autowired等"),n("），将Bean注册到Spring IOC容器中")]),t("li",null,[n("Java配置类方式：从"),t("span",{hl:""},"Spring 3.0版本"),n("开始支持，通过Java类来定义Bean、Bean之间的依赖关系和配置信息，从而代替XML配置文件的方式。通过"),t("span",{hl:""},"@Configuration、@Bean等注解"),n("来实现Bean和依赖关系的配置")])],-1);function B(k,P,T,v,q,X){const a=i("di");return o(),p("div",null,[h,r(a,{hlbg:""},{default:s(()=>[n("Spring充当管理组件的角色（IOC）")]),_:1}),u,g,C,S,b,m,x,I,A,f,O])}const L=e(_,[["render",B]]);export{J as __pageData,L as default};
