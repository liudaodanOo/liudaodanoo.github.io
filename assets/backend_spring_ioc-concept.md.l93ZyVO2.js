import{_ as e,D as i,o,c as p,I as r,w as s,R as l,k as t,a as n}from"./chunks/framework.S8W019Nk.js";const c="/assets/ioc-component.FxJwc_sA.jpg",d="/assets/ioc-container.1x3aMbOz.jpg",J=JSON.parse('{"title":"容器和核心概念","description":"","frontmatter":{},"headers":[],"relativePath":"backend/spring/ioc-concept.md","filePath":"backend/spring/ioc-concept.md"}'),_={name:"backend/spring/ioc-concept.md"},h=l('<h1 id="容器和核心概念" tabindex="-1">容器和核心概念 <a class="header-anchor" href="#容器和核心概念" aria-label="Permalink to &quot;容器和核心概念&quot;">​</a></h1><blockquote><p>控制反转（Inversion of Control, IOC）</p></blockquote><h2 id="组件和组件管理的概念" tabindex="-1">组件和组件管理的概念 <a class="header-anchor" href="#组件和组件管理的概念" aria-label="Permalink to &quot;组件和组件管理的概念&quot;">​</a></h2><p>整个项目就是由各种组件搭建而成的：</p><p><img src="'+c+'" alt="image.jpg"></p><p><strong>我们期望：</strong></p><ul><li>有人替我们创建组件对象</li><li>有人帮我们保存组件对象</li><li>有人帮我们自动组装</li><li>有人替我们管理事务</li><li>有人协助我们整合其他框架</li><li>......</li></ul>',7),u=t("p",null,[n("组件可以完全交给Spring框架进行管理，Spring框架替代了程序员原有的"),t("span",{hl:""},"new对象和对象属性赋值动作"),n("等。")],-1),g=t("p",null,"Spring具体的管理组件动作包含：",-1),C=t("ul",null,[t("li",null,"组件对象实例化"),t("li",null,"组件对象属性赋值"),t("li",null,"组件对象之间引用"),t("li",null,"组件对象存活周期管理"),t("li",null,"......")],-1),S=t("p",null,[n("我们只需要编写"),t("span",{hl:""},"元数据（配置文件）"),n("告知Spring管理哪些类组件和它们的关系即可。Spring充当组件的容器，创建、管理、存储组件，减少我们的编码压力，让我们更加专注进行业务编写。")],-1),b=t("blockquote",null,[t("p",null,[n("组件是映射到应用程序中所有可重用组件的Java对象，应该是可复用的功能对象。"),t("span",{hl:""},"组件一定是对象，对象不一定是组件"),n("。")])],-1),m=t("p",null,[t("strong",null,"组件交给Spring管理的优点：")],-1),x=t("ul",null,[t("li",null,[n("降低了组件之间的"),t("span",{hl:""},"耦合性"),n("：Spring IOC容器通过依赖注入机制，将组件之间的依赖关系削弱，减少了程序组件之间的耦合性，使组件更加松散地耦合")]),t("li",null,[n("提高了代码的"),t("span",{hl:""},"可重用性和可维护性"),n("：将组件实例化的过程、依赖关系的管理等功能交给Spring IOC容器处理，使得组件代码更加模块化、可重用、更易于维护")]),t("li",null,[n("方便了"),t("span",{hl:""},"配置和管理"),n("：Spring IOC容器通过XML文件或注解，轻松的对组件进行配置和管理，使得组件的切换、替换等操作更加的方便和快捷")]),t("li",null,[n("交个Spring管理的对象（组件），"),t("span",{hl:""},"可享受Spring框架的其他功能（AOP、声明事务管理）等")])],-1),I=t("h2",{id:"容器和容器的实现",tabindex:"-1"},[n("容器和容器的实现 "),t("a",{class:"header-anchor",href:"#容器和容器的实现","aria-label":'Permalink to "容器和容器的实现"'},"​")],-1),A=t("p",null,[n("`Spring IOC容器负责实例化、配置和组装组件（bean）。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。"),t("span",{hl:""},"配置元数据以XML、Java注解或Java代码形式表现"),n("。它允许表达组成应用程序以及这些组件之间丰富的相互依赖关系。")],-1),f=l('<p><img src="'+d+'" alt="image.jpg"></p><h3 id="容器具体接口和实现类" tabindex="-1">容器具体接口和实现类 <a class="header-anchor" href="#容器具体接口和实现类" aria-label="Permalink to &quot;容器具体接口和实现类&quot;">​</a></h3><ol><li>接口</li></ol><p>BeanFactory接口提供了一种高级配置机制，能够管理任何类型的对象，它是Spring IOC容器标准化接口。</p><p>ApplicationContext是BeanFactory的子接口，它扩展了以下功能：</p><ul><li><p>更容易与Spring的AOP功能集成</p></li><li><p>消息资源处理（用于国际化）</p></li><li><p>特定于应用程序给予此接口实现，例如Web应用程序的WebApplicationContext</p><p>2.ApplicationContext容器的实现类：</p></li></ul><table><thead><tr><th>实现类</th><th>作用</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径的XML格式的配置文件创建IOC容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取XML格式的配置文件创建IOC容器对象</td></tr><tr><td>AnnotationConfigApplicationContext</td><td>通过读取Java配置类创建IOC容器对象</td></tr><tr><td>WebApplicationContext</td><td>专门为Web应用准备，基于Web环境创建IOC容器对象，并将对象引入ServletContext域中</td></tr></tbody></table><h3 id="容器管理配置方式" tabindex="-1">容器管理配置方式 <a class="header-anchor" href="#容器管理配置方式" aria-label="Permalink to &quot;容器管理配置方式&quot;">​</a></h3><p>Spring框架提供了多种配置方式：</p>',9),O=t("ul",null,[t("li",null,"XML配置方式：Spring框架最早的配置方式之一，通过在XML文件中定义Bean及其依赖关系、Bean的作用域等信息，让Spring IOC容器来管理Bean之间的依赖关系。"),t("li",null,[n("注解方式：从"),t("span",{hl:""},"Spring 2.5版本"),n("开始支持，通过在Bean类上使用注解来代替XML配置文件中的配置信息。通过在Bean类上加上相应的注解（如"),t("span",{hl:""},"@Component、@Service、@Autowired等"),n("），将Bean注册到Spring IOC容器中")]),t("li",null,[n("Java配置类方式：从"),t("span",{hl:""},"Spring 3.0版本"),n("开始支持，通过Java类来定义Bean、Bean之间的依赖关系和配置信息，从而代替XML配置文件的方式。通过"),t("span",{hl:""},"@Configuration、@Bean等注解"),n("来实现Bean和依赖关系的配置")])],-1);function B(k,P,T,v,q,X){const a=i("di");return o(),p("div",null,[h,r(a,{hlbg:""},{default:s(()=>[n("Spring充当管理组件的角色（IOC）")]),_:1}),u,g,C,S,b,m,x,I,A,f,O])}const L=e(_,[["render",B]]);export{J as __pageData,L as default};
